{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMjoMKc5yYOpCLVNOVNOfh7"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BasharSalha123/hw_streamlit/blob/main/Hw2_msba_3251.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RRphRPXnVzmu",
        "outputId": "15f8f660-6c83-4f40-88ea-991072bf23f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile app.py\n",
        "\n",
        "# Importing files\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import plotly.figure_factory as ff\n",
        "from plotly.subplots import make_subplots\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "st.set_page_config(\n",
        "  page_title= 'Why best Cereal',\n",
        "  page_icon= ':smiley:',\n",
        "  initial_sidebar_state= 'expanded')\n",
        "  \n",
        "st.title(\"Welcome to my my Homework!\")\n",
        "\n",
        "\n",
        "df = pd.read_csv("cereal.csv")\n",
        "df.head(2)\n",
        "\n",
        "brands = {\"A\" : \"American Home Food Products\",\n",
        "\"G\" : \"General Mills\",\n",
        "\"K\" : \"Kelloggs\",\n",
        "\"N\" : \"Nabisco\",\n",
        "\"P\" : \"Post\",\n",
        "\"Q\" : \"Quaker Oats\",\n",
        "\"R\" : \"Ralston Purina\"\n",
        "}\n",
        "df.replace({\"mfr\": brands}, inplace=True)\n",
        "\n",
        "types = {\"C\" : \"Cold\",\n",
        "          \"H\" : \"Hot\"\n",
        "}\n",
        "df.replace({\"type\": types}, inplace=True)\n",
        "\n",
        "df=df.rename(columns={'type':'Type','rating':'Rating',\"sugars\":\"Sugars\",\"calories\":\"Calories\",\"fiber\":\"Fiber\",\"vitamins\":\"Vitamins\",\"mfr\":\"Brand\"})\n",
        "\n",
        "\n",
        "# logistics: changing page icon and setting title\n",
        "st.write(\"The below dataset sums the rating of different cereal with their nutrition components\")\n",
        "st.write(\"These are the first five rows in my data:\")\n",
        "\n",
        "#Reading the data\n",
        "if st.checkbox('Click for Expanded Data'):\n",
        "    st.subheader('Expanded Data')\n",
        "    st.write(df)\n",
        "\n",
        "\n",
        "# page 1:\n",
        "\n",
        "st.sidebar.markdown(\"# Discovery Phase :eye:\")\n",
        "\n",
        "\n",
        "\n",
        "st.header(\"Number of Observation per Brand\")\n",
        "\n",
        "Q_per_brand = df.groupby(['Brand'])['Brand'].count()\n",
        "Q_per_brand=pd.DataFrame({'Brand':Q_per_brand.index, 'Count':Q_per_brand.values})\n",
        "\n",
        "\n",
        "# Visual number 1 \n",
        "\n",
        "fig = px.pie(Q_per_brand, values='Count', names='Brand', color='Brand')\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "st.markdown('The above plot shows that the dataset does not have equal instances from each brand')\n",
        "\n",
        "# Visual 2 \n",
        "st.header(\"Different Nutrition Facts Across Brands\")\n",
        "# pivot table to get the mean of each the below nutrition facts across brands\n",
        "nutrition_per_brand=df.pivot_table(values=['Calories','Fiber','Sugars','Vitamins'],index= \"Brand\", aggfunc=np.mean)\n",
        "# bringing it back to Pd\n",
        "nutrition_per_brand = pd.DataFrame(nutrition_per_brand.to_records())\n",
        "\n",
        "\n",
        "\n",
        "# The used code only takes input as lists, thus I rearranged the data to lists\n",
        "brands=nutrition_per_brand.Brand.tolist()\n",
        "Calories_mn=nutrition_per_brand.Calories.tolist()\n",
        "Fiber_mn=nutrition_per_brand.Fiber.tolist()\n",
        "Sugars_mn=nutrition_per_brand.Sugars.tolist()\n",
        "Vitamins_mn=nutrition_per_brand.Vitamins.tolist()\n",
        "\n",
        "# Multiple subplot code\n",
        "specs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]\n",
        "fig = make_subplots(rows=2, cols=2, specs=specs)\n",
        "# Each line is a piechart\n",
        "fig.add_trace(go.Pie(labels=brands, values=Calories_mn, title=\"Calories Across Brands\"), 1, 1)\n",
        "fig.add_trace(go.Pie(labels=brands, values= Fiber_mn, title='Fiber Across Brands'), 1, 2)\n",
        "fig.add_trace(go.Pie(labels=brands, values= Sugars_mn, title='Sugars Across Brands'), 2, 1)\n",
        "fig.add_trace(go.Pie(labels=brands, values= Vitamins_mn, title='Vitamins Across Brands'), 2, 2)\n",
        "# Adding a title and deleting the percentages for clarity \n",
        "fig.update(layout_showlegend=True)\n",
        "fig.update_layout(margin=dict(l=20, r=20, t=20, b=20))\n",
        "\n",
        "fig.update_traces(textinfo='none')\n",
        "fig = go.Figure(fig)\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "st.markdown('The above plot shows the average nutrients across brands')\n",
        "\n",
        "\n",
        "\n",
        "# Figure 3 \n",
        "\n",
        "\n",
        "\n",
        "st.markdown(\"# Better Cereal to Better Business :money_mouth_face: \")\n",
        "st.sidebar.markdown(\"# Business Insights :wink: \")\n",
        "\n",
        "\n",
        "st.header(\"Ratings Across Different Types of Cereals\")\n",
        "fig = px.box(df,x='Type' ,y=\"Rating\",title='Ratings Across Different Types of Cereals')\n",
        "fig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n",
        "    plot_bgcolor='rgba(0,0,0,0)',margin=dict(l=30, r=30, t=30, b=30))\n",
        "fig.show()\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "st.markdown('The above box-plot shows that on average people like hot cereal more than cold ones')\n",
        "\n",
        "\n",
        "# Figure 4\n",
        "st.header(\"Ranking and Calories Across Brands\")\n",
        "# pivot table to get the mean of rating, calories and fiber across different brands\n",
        "rating_per_brand=df.pivot_table(values=[\"Rating\",'Calories','Fiber'],index= \"Brand\", aggfunc=np.mean)\n",
        "rating_per_brand = pd.DataFrame(rating_per_brand.to_records())\n",
        "\n",
        "fig = px.bar(rating_per_brand, x='Brand', y='Rating',hover_data=['Calories', 'Fiber'], color='Calories',labels={'mfr':'Brand'},height=500)\n",
        "fig.update_layout(paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)',margin=dict(l=40, r=40, t=40, b=40))\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "st.markdown('The above plot shows that brands that have the most calories have lower rating')\n",
        "\n",
        "\n",
        "# figure 5:\n",
        "\n",
        "\n",
        "st.header('Ranking and Fibers Across Brands')\n",
        "fig = px.bar(rating_per_brand, x='Brand', y='Rating',hover_data=['Calories', 'Fiber'], color='Fiber',\n",
        "             labels={'mfr':'Brand'})\n",
        "fig.update_layout(paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)',margin=dict(l=40, r=40, t=40, b=40))\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "st.markdown('The above plot shows that brands that have the most fibers have higher rating')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "st.header('Correlation Heatmap for nutrients and Rankings')\n",
        "#Creates the Correlation Matrix\n",
        "corr_matrix=df.corr()\n",
        "### takes out only one side of the matrix to make it visually appealing \n",
        "mask=np.triu(np.ones_like(corr_matrix,dtype= bool))\n",
        "rLT = corr_matrix.mask(mask)\n",
        "\n",
        "\n",
        "heat = go.Heatmap(\n",
        "    z = rLT,\n",
        "    x = rLT.columns.values,\n",
        "    y = rLT.columns.values,\n",
        "    zmin = - 0.25, # Sets the lower bound of the color domain\n",
        "    zmax = 1,\n",
        "    xgap = 1, # Sets the horizontal gap (in pixels) between bricks\n",
        "    ygap = 1,\n",
        "    colorscale = px.colors.diverging.RdBu)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "layout = go.Layout( \n",
        "    width=800, \n",
        "    height=600,\n",
        "    xaxis_showgrid=False,\n",
        "    yaxis_showgrid=False,\n",
        "    yaxis_autorange='reversed'\n",
        ")\n",
        "\n",
        "fig=go.Figure(data=[heat], layout=layout)\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "st.markdown('The above Correlation Matrix is very insightful. We can see that calories and brands hurt the rating. However, fiber and protein are boost ratings up')\n",
        "\n",
        "\n",
        "# Setting a sidebar:\n",
        "st.markdown(\"# Interactive Plots :wink:\")\n",
        "st.sidebar.markdown(\"# Time to Make It Interactive :wink:\")\n",
        "\n",
        "st.header('Filtering By Ratings and Calories')\n",
        "\n",
        "\n",
        "df_container= st.container()\n",
        "\n",
        "\n",
        "Menu_Items= ['Filter By Ratings', 'View All Data', 'Filter By Calories']\n",
        "Menu_choice= st.sidebar.selectbox('Select the Option', Menu_Items)\n",
        "\n",
        "\n",
        "if Menu_choice== 'View All Data':\n",
        "    with df_container:   \n",
        "        st.subheader(\"Full Data with all Ratings:\")\n",
        "        st.write(df)\n",
        " \n",
        "elif Menu_choice== 'Filter By Ratings':\n",
        "        st.header('Determine Rating Range:')\n",
        "        range= st.slider('Slide & Pick', 0.0,100.0, (50.0,76.0))\n",
        "   \n",
        "        st.write(range)\n",
        "        filtered= df[df['Rating'].between(range[0], range[1])]\n",
        "        st.write(filtered)\n",
        "\n",
        "\n",
        "elif Menu_choice== 'Filter By Calories':\n",
        "        st.header('Determine Rating Range:')\n",
        "        range= st.slider('Slide & Pick', 0.0,160.0, (50.0,76.0))\n",
        "   \n",
        "        st.write(range)\n",
        "        filtered_cal= df[df['Calories'].between(range[0], range[1])]\n",
        "        st.write(filtered_cal)\n",
        "\n",
        "st.markdown('The above scroll works as a filtering criteria')\n",
        "\n",
        "\n",
        "st.header('Average Rating per Brand')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Brand = rating_per_brand['Brand']\n",
        "Brand_choice = st.sidebar.selectbox('Select The Brand:', Brand)\n",
        "Rating = rating_per_brand[\"Rating\"].loc[rating_per_brand[\"Brand\"] == Brand_choice]\n",
        "st.write('Averge Rating of the chosen brand is:', Rating)\n",
        "\n",
        "st.markdown('This helps us knowing the average rating by brand simply by zooming in to the brand. ')\n",
        "\n",
        "st.header('Bubble Plot for Brands, Sugars, Ratings and Fiber')\n",
        "\n",
        "fig = px.scatter(df[df['Brand']==Brand_choice],x='Sugars',y='Rating',size='Fiber', color=\"Brand\")\n",
        "\n",
        "\n",
        "st.plotly_chart(fig)\n",
        "st.markdown('It is clear that larger bubbles score higher. This means cereal rich in fiber. Also, there is a negative slope. This shows the negative impact of sugars on the rating ')\n",
        "\n",
        "st.markdown('Kindly note that American Home Food Products have only one entry. Please try another company to see the visualization ')\n",
        "\n",
        "\n",
        "st.sidebar.markdown(\"Homework Done By Bashar Salha\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9GgoitJ2YG4O"
      },
      
      "outputs": []
    }
  ]
}
